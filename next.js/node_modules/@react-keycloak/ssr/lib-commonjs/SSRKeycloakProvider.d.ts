import type { AuthClient, AuthClientInitOptions, AuthProviderProps, AuthClientEvent, AuthClientError, AuthClientTokens } from '@react-keycloak/core';
import type { KeycloakConfig } from 'keycloak-js';
import * as React from 'react';
import type { TokenPersistor } from './persistors/types';
import type { SSRAuthClient } from './types';
export interface SSRKeycloakProviderProps<T extends SSRAuthClient> extends Omit<AuthProviderProps<T>, 'authClient'> {
    persistor: TokenPersistor;
    keycloakConfig: KeycloakConfig;
}
interface SSRKeycloakProviderState {
    initOptions: AuthClientInitOptions;
    keycloak: AuthClient;
}
export declare class SSRKeycloakProvider extends React.PureComponent<SSRKeycloakProviderProps<SSRAuthClient>, SSRKeycloakProviderState> {
    constructor(props: SSRKeycloakProviderProps<SSRAuthClient>);
    onEvent: (event: AuthClientEvent, error?: AuthClientError | undefined) => void;
    onTokens: (tokens: AuthClientTokens) => void;
    render(): JSX.Element;
}
export {};
